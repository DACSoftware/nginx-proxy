{{ define "service_http" }}

{{ $host := .Host }}
{{ $containers := .Containers }}
{{ $CurrentContainer := .CurrentContainer }}

{{ $serviceContainers := whereExist $containers "Env.VIRTUAL_HTTP_PORT" }}

{{ if not (eq (len $serviceContainers) 0 ) }}

upstream http-{{ $host }} {
{{ range $container := $serviceContainers }}
	{{ $addrLen := len $container.Addresses }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if eq $knownNetwork.Name $containerNetwork.Name }}
				## Can be connect with "{{ $containerNetwork.Name }}" network
				{{ $port := $container.Env.VIRTUAL_HTTP_PORT }}
				{{ $address := where $container.Addresses "Port" $port | first }}
				{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

server {
	server_name {{ $host }};
	listen 80 {{ $default_server }};
	access_log /var/log/nginx/access-http.log vhost;

	location / {
		proxy_pass http://http-{{ trim $host }};
		proxy_connect_timeout 300;
		proxy_send_timeout 300;
		proxy_read_timeout 600;
	}
}

{{ end }}

{{ end }}
